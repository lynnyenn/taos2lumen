@extends('includes.base')
@section('title')
    {{ trans('base.charts') }}
@stop
@section('css')
<style type="text/css">
path {
    stroke: steelblue;
    stroke-width: 2;
    fill: none;
}

.axis path,
.axis line {
    fill: none;
    stroke: grey;
    stroke-width: 1;
    shape-rendering: crispEdges;
}
div.tooltip {
    position: absolute;
    text-align: center;
    width: 60px;
    height: 28px;
    padding: 2px;
    font: 12px sans-serif;
    background: lightsteelblue;
    border: 0px;
    border-radius: 8px;
    pointer-events: none;
}

.overlay {
  fill: none;
  pointer-events: all;
}

.focus circle {
  fill: none;
  stroke: steelblue;
}

</style>
<link rel="stylesheet" href="/css/linechart.css">
@stop
@section('content')
    <h2 class="padded">{{ trans('base.charts') }}</h2>
<div id="charts">

</div>
@stop
@section('js')
<script src="http://d3js.org/d3.v3.js"></script>
<script>

var margin = {top: 20, right: 80, bottom: 30, left: 50},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;
var bisectDate = d3.bisector(function(d) { return d.date; }).left;
//var parseDate = d3.time.format("%d-%b-%y").parse;
//var parseDate = d3.time.format("%H-%i").parse;
var formatTime = d3.time.format("%e %B");
var x = d3.time.scale().range([0, width]);
var y0 = d3.scale.linear().range([height, 0]);
var y1 = d3.scale.linear().range([height, 0]);
var y2 = d3.scale.linear().range([height, 0]);

var xAxis = d3.svg.axis().scale(x)
    .orient("bottom").ticks(10);

var yAxisLeft = d3.svg.axis().scale(y0)
    .orient("left").ticks(10);

var yAxisRight = d3.svg.axis().scale(y1)
    .orient("right").ticks(10);

var templine = d3.svg.line()
    .x(function(d) { return x(d.timestamp*1000); })
    .y(function(d) { return y0(d.temperature); });

var humpline = d3.svg.line()
    .x(function(d) { return x(d.timestamp*1000); })
    .y(function(d) { return y1(d.humidity); });

var rainfallline = d3.svg.line()
    .x(function(d) { return x(d.timestamp*1000); })
    .y(function(d) { return y2(d.rainfall); });

// Define the div for the tooltip
var div = d3.select("#charts").append("div")
    .attr("class", "tooltip")
    .style("opacity", 0);

var svg = d3.select("#charts")
    .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
    .append("g")
        .attr("transform",
              "translate(" + margin.left + "," + margin.top + ")");

// Get the data
d3.tsv("/charts/1", function(error, data) {
    data.forEach(function(d) {
        //d.date = parseDate(d.timestamp);
        d.date = new Date(d.timestamp*1000);
        //d.date = d.timestamp;
        d.temperature = +d.temperature;
        d.humidity = +d.humidity;
        d.rainfall = +d.rainfall;
        console.log(d.rainfall);
    });

    // Scale the range of the data
    x.domain(d3.extent(data, function(d) { return d.date; }));
    y0.domain([0, d3.max(data, function(d) {
        return Math.max(d.temperature); })]);

    y1.domain([0, d3.max(data, function(d) {
        return Math.max(d.humidity); })]);

    y2.domain([0, d3.max(data, function(d) {
        return Math.max(d.rainfall); })]);

    svg.append("path")        // Add the templine path.
        .attr("d", templine(data));

    svg.append("path")        // Add the humpline path.
        .style("stroke", "green")
        .attr("d", humpline(data));

    svg.append("path")        // Add the rainfallline path.
        .style("stroke", "grey")
        .attr("d", rainfallline(data));

    svg.append("g")            // Add the X Axis
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis);

    svg.append("g")
        .attr("class", "y axis")
        .style("fill", "steelblue")
        .call(yAxisLeft);

    svg.append("g")
        .attr("class", "y axis")
        .attr("transform", "translate(" + width + " ,0)")
        .style("fill", "red")
        .call(yAxisRight);

});
function updateWindow(){
    x = w.innerWidth || e.clientWidth || g.clientWidth;
    y0 = w.innerHeight|| e.clientHeight|| g.clientHeight;

    svg.attr("width", x).attr("height", y0);
}
window.onresize = updateWindow;
</script>
@stop
